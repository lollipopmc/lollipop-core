on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DEEPSOURCE_CLI_VERSION: 0.8.6
  GOLANG_VERSION: 1.21

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare Rust Toolchain
        run: |
          rustup update stable
          cargo +stable install cargo-llvm-cov
      # Note that amd64 in Golang should
      # convert to x86_64
      - name: Download DeepSource CLI
        run: |
          OS=$(go env GOOS)
          ARCH=$(go env GOARCH)
          # convert amd64 to x86_64
          if [ "$ARCH" = "amd64" ]; then
            ARCH="x86_64"
          fi
          PLATFORM="${OS}_${ARCH}"
          echo "Downloading DeepSource CLI for $PLATFORM on version v$DEEPSOURCE_CLI_VERSION"
          gh release download v$DEEPSOURCE_CLI_VERSION -R DeepSourceCorp/cli --pattern "*$PLATFORM.tar.gz"
          tar -xvzf "deepsource_${DEEPSOURCE_CLI_VERSION}_${PLATFORM}.tar.gz"
          IS_DEEPSOURCE_CLI_DOWNLOADED=$(ls -1 | grep deepsource | wc -l)
          if [ "$IS_DEEPSOURCE_CLI_DOWNLOADED" -eq 0 ]; then
            echo "DeepSource CLI download failed"
            exit 1
          else
            echo "DeepSource CLI downloaded successfully"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEEPSOURCE_CLI_VERSION: ${{ env.DEEPSOURCE_CLI_VERSION }}
      - name: Checkout Code
        uses: actions/checkout@v4
        if: ${{ github.event_name != 'pull_request' }}
      - name: Checkout Pull Request Code
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Build
        run: cargo +stable build --verbose
      - name: Test
        run: cargo +stable test --verbose
      - name: Check Coverage
        run: cargo +stable llvm-cov --lcov --output-path coverage.info
      - name: Upload Coverage
        run: ./deepsource report --analyzer test-coverage --key rust --value-file coverage.info
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
